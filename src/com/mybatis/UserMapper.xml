<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.dao.UserDao">
    <!--使用bind元素进行模糊查询-->
    <select id="selectUserByBind" resultType="com.po.MyUser" parameterType= "com.po.MyUser">
        <!-- bind 中的 uname 是 com.po.MyUser 的属性名-->
        <bind name="paran_uname" value="'%' + uname + '%'"/>
        select * from user where uname like #{paran_uname}
    </select>


    <!--使用foreach元素查询用户信息-->
    <select id="selectUserByForeach" resultType="com.po.MyUser" parameterType=
            "List">
        select * from user where uid in
        <foreach item="item" index="index" collection="list"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--使用set元素动态修改一个用户-->
    <update id="updateUserBySet" parameterType="com.po.MyUser">
        update user
        <set>
            <if test="uname!=null">uname=#{uname}</if>
            <if test="usex!=null">usex=#{usex}</if>
        </set>
        where uid=#{uid}
    </update>

    <!--使用where元素根据条件动态查询用户信息-->
    <select id="selectUserByWhere" resultType="com.po.MyUser" parameterType="com.po.MyUser">
        select * from user
        <where>
            <if test="uname != null and uname != ''">
                and uname like concat('%',#{uname},'%')
            </if>
            <if test="usex != null and usex != ''">
                and usex=#{usex}
            </if>
        </where>
    </select>


    <!--使用trim元素根据条件动态查询用户信息-->
    <select id="selectUserByTrim" resultType="com.po.MyUser" parameterType="com.po.MyUser">
        select * from user
        <trim prefix="where" prefixOverrides="and | or">
            <if test="uname!=null and uname!=''">
                and uname like concat('%',#{uname},'%')
            </if>
            <if test="usex!=null and usex!=''">
                and usex=#{usex}
            </if>
        </trim>
    </select>

    <!--使用choose、when、otherwise元素根据条件动态查询用户信息-->
    <select id="selectUserByChoose" resultType="com.po.MyUser" parameterType="com.po.MyUser">
        select * from user where 1=1
        <choose>
            <when test="uname!=null and uname!=''">
                and uname like concat('%',#{uname},'%')
            </when>
            <when test="usex!=null and usex!=''">
                and usex=#{usex}
            </when>
            <otherwise>
                and uid > 10
            </otherwise>
        </choose>
    </select>


    <!--使用 if 元素根据条件动态查询用户信息-->
    <select id="selectUserByIf" resultType="com.po.MyUser" parameterType="com.po.MyUser">
        select * from user where 1=1
        <if test="uname!=null and uname!=''">
            and uname like concat('%',#{uname},'%')
        </if>
        <if test="usex !=null and usex !=''">
            and usex=#{usex}
        </if>
    </select>


    <!-- 一对多 根据uid查询用户及其关联的订单信息：级联查询的第一种方法（嵌套查询） -->
    <resultMap type="com.po.MyUser" id="userAndOrders1">
        <id property="uid" column="uid"/>
        <result property="uname" column="uname"/>
        <result property="usex" column="usex"/>
        <!-- 一对多级联查询，ofType表示集合中的元素类型，将uid传递给selectOrdersByld -->
        <collection property="ordersList" ofType="com.po.Orders"
                    column="uid" select="com.dao.OrdersDao.selectOrdersById"/>
    </resultMap>
    <select id="selectOrdersById1" parameterType="Integer"
            resultMap="userAndOrders1">
        select * from user where uid = #{id}
    </select>
    <!--对多根据uid查询用户及其关联的订单信息：级联查询的第二种方法（嵌套结果） -->
    <resultMap type="com.po.MyUser" id="userAndOrders2">
        <id property="uid" column="uid"/>
        <result property="uname" column="uname"/>
        <result property="usex" column="usex"/>
        <!-- 对多级联查询，ofType表示集合中的元素类型 -->
        <collection property="ordersList" ofType="com.po.Orders">
            <id property="id" column="id"/>
            <result property="ordersn" column="ordersn"/>
        </collection>
    </resultMap>
    <select id="selectOrdersById2" parameterType="Integer"
            resultMap="userAndOrders2">
        select u.*,o.id, o.ordersn from user u, orders o where u.uid
        = o.user_id and
        u.uid=#{id}
    </select>
    <!-- 一对多 根据uid查询用户及其关联的订单信息：连接查询（使用POJO存储结果） -->
    <select id="selectOrdersById3" parameterType="Integer"
            resultType="com.pojo.SelectUserOrdersById">
        select u.*, o.id, o.ordersn from user u, orders o where
        u.uid = o.user_id
        and u.uid=#{id}
    </select>


    <!-- 使用自定义结果集类型查询所有用户-->
    <select id="selectResultMap" resultMap="myResult">
    select * from user
    </select>
    <!--使用自定义结果集类型-->
    <!--    <resultMap id="" type="">
        <constructor>< 类再实例化时用来注入结果到构造方法 >
        <idArg/>< ID参数，结果为ID >
        <arg/>< 注入到构造方法的一个普通结果 >
    </constructor>
    <id/>< 用于表示哪个列是主键 >
    <result/><注入到字段或JavaBean属性的普通结果 >
    <association property=""/><用于一对一关联 >
    <collection property=""/><用于一对多、多对多关联 >
    <discriminator javaType="">< 使用结果值来决定使用哪个结果映射>
    <case value=""/>< 基于某些值的结果映射 >
    </discriminator>
            </resultMap>-->
    <resultMap type="com.pojo.MapUser" id="myResult">
        <!-- property 是 com.pojo.MapUser 类中的属性-->
        <!-- column是查询结果的列名，可以来自不同的表-->
        <id property="m_uid" column="uid"/>
        <result property="m_uname" column="uname"/>
        <result property="m_usex" column="usex"/>
    </resultMap>

    <!-- 查询所有用户信息存到Map中 -->
    <select id="selectAllUserMap" resultType="map">
    select * from user
</select>

    <select id="selectAllUserBybean" resultType="com.po.MyUser" parameterType="com.pojo.SelectUserParam">
    select * from user
    where uname like concat('%',#{u_name},'%')
    and usex=#{u_sex}
</select>

    <!-- 查询陈姓男性用户信息 -->
    <select id="selectChenUserByMap" resultType="com.po.MyUser">
    select * from user
    where uname like concat('%',#{u_name},'%')
    and usex = #{u_sex}
</select>

    <!--根据uid查询一个用户信息 -->
    <select id="selectUserById" parameterType="Integer" resultType="com.po.MyUser">
        select * from user where uid = #{uid}
    </select>
    <!-- 查询所有用户信息 -->
    <select id="selectAllUser" resultType="com.po.MyUser">
        select * from user
    </select>
    <!-- 添加一个用户，#{uname}为 com.mybatis.po.MyUser 的属性值 -->
    <insert id="addUser" parameterType="com.po.MyUser" keyProperty="uid" useGeneratedKeys="true">
    insert into user (uname,usex) values(#{uname},#{usex})
    </insert>
    <!--修改一个用户 -->
    <update id="updateUser" parameterType="com.po.MyUser">
        update user set uname = #{uname},usex = #{usex} where uid = #{uid}
    </update>
    <!-- 删除一个用户 -->
    <delete id="deleteUser" parameterType="Integer">
        delete from user where uid = #{uid}
    </delete>
</mapper>